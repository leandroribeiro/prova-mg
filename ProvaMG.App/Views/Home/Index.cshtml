@using ProvaMG.App.Controllers
@{
    Layout = "_Layout1";
    ViewData["Title"] = "Home Page";
}
@model IndexViewModel

<!-- page-intro start-->
<!-- ================ -->
<div class="page-intro">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <ol class="breadcrumb">
                    <li class="active">Home</li>
                </ol>
            </div>
            <div class="col-md-6">
                <ul class="breadcrumb">
                    <li><a href="@Url.Action("Logout", "Conta")">Sair</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>
<!-- page-intro end -->

<!-- main-container start -->
<!-- ================ -->
<section class="main-container">

    <div class="container">
        <div class="row">

            <!-- main start -->
            <!-- ================ -->
            <div class="main col-md-9">

                <!-- page-title start -->
                @* <h1 id="forms" class="page-title">Home</h1> *@
                
                <div id="unidadesContent"></div>
                <div id="municipiosContent"></div>
                <div id="paginacaoContent"></div>

            </div>
        </div>
    </div>
</section>

@section Styles {
    <link rel="stylesheet" href="~/lib/sweetalert2/sweetalert2.min.css" />
    <link rel="stylesheet" href="~/lib/select2/css/select2.min.css" />

    <style type="text/css">
        .txtedit {
            display: none;
            width: 99%;
            height: 30px;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/sweetalert2/sweetalert2.min.js"></script>
    <script src="~/lib/select2/js/select2.min.js"></script>
    <script src="~/lib/jquery-loading-overlay/loadingoverlay.min.js"></script>

    <script id="combo-template" type="text/x-handlebars-template">
        <h2>{{titulo}}</h2>
        <select class="form-control" id="{{comboId}}" name="{{comboId}}">
            <option value="">Selecione</option>
            {{#each itens }}
                <option value="{{valor}}" {{#selecionado}} selected="selected" {{/selecionado}} >{{texto}}</option>
            {{/each}}
        </select>
    </script>

    <script id="table-template" type="text/x-handlebars-template">
        <h2>{{titulo}}</h2>
        <table class="table table-hover" id="{{tabelaId}}">
            <thead>
            <tr>
                <th>#</th>
                <th>{{cabecalho_nome}}</th>
            </tr>
            </thead>
            <tbody>
                {{#each itens }}
                     <tr>
                         <td>{{codigo}}</td>
                         <td>
                         {{#editavel}}
                             <a href="#" data-id="{{codigo}}">{{nome}}</a>
                             <input type="text" class="txtedit" value="{{nome}}" id="txtedit_{{codigo}}" data-id="{{codigo}}" />
                         {{else}}
                             {{nome}}
                         {{/editavel}}
                         </td>
                     </tr>
                {{/each}}
            </tbody>
        </table>
    </script>

    <script id="paginator-template" type="text/x-handlebars-template">
        <nav aria-label="Paginação dos resultados">
            <ul class="pagination justify-content-center">
                <!--<li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1">Previous</a>
                </li>-->
                {{#each paginas as |pagina| }}
                    <li class="page-item {{#if (eq pagina ../paginaAtual)}}active{{/if}}"><a class="page-link" href="#" data-pagina="{{pagina}}">{{pagina}}</a></li>
                {{/each}}
                <!--<li class="page-item">
                    <a class="page-link" href="#">Next</a>
                </li>-->
            </ul>
        </nav>   
    </script>

    <script type="text/javascript">
        var util = (function() {
            function gerarPaginas(paginaAtual, paginaFinal) {
                var min = 1;
                var max = paginaFinal;

                var arr = [];
                for (let i = min; i <= max; i += 1) {
                    arr.push(i);
                }

                return arr;
            }

            function gerarPaginasComLimite(paginaAtual, paginaFinal, limite) {
                var min = paginaAtual -limite;
                while(min <= 0){
                    min++;
                }
                var max = paginaAtual +limite;
                while(max > paginaFinal){
                    max--;
                }
                var arr = [];
                for (let i = min; i <= max; i += 1) {
                    arr.push(i);
                }

                return arr;
            }
            
            function tratarError(jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                
                console.error('Request Failed: ' + err );
                
                Swal.fire({
                    position: 'top',
                    icon: 'error',
                    title: 'Ocorreu um erro!',
                    showConfirmButton: false,
                    timer: 6000,
                    timerProgressBar: true
                });
            }
            
            return {
                gerarPaginas: gerarPaginas,
                gerarPaginasComLimite: gerarPaginasComLimite,
                tratarError: tratarError
            }
            
        })();    
    
        var events = (function() {
        
            var events = {};
        
            function on(eventName, fn) {
                events[eventName] = events[eventName] || [];
                events[eventName].push(fn);
            }
        
            function off(eventName, fn) {
                if (events[eventName]) {
                    for (var i = 0; i < events[eventName].length; i++) {
                        if( events[eventName][i] === fn ) {
                            events[eventName].splice(i, 1);
                            break;
                        }
                    }
                }
            }
        
            function emit(eventName, data) {
                if (events[eventName]) {
                    events[eventName].forEach(function(fn) {
                        fn(data);
                    });
                }
            }
        
            return {
                on: on,
                off: off,
                emit: emit
            };
        
        })();
    
        var paginacao = (function (){
            var paginacaoData = {
                paginas:0,
                paginaAtual:0
            };
            
            //cache DOM
            var $paginacaoContent = $("#paginacaoContent");
            var paginacaoTemplate = Handlebars.compile($("#paginator-template").html());
            
            //bind events
            $paginacaoContent.on("click","nav ul li.page-item a", _goToPage);
            
            function _render(){
                $paginacaoContent.html('');
                $paginacaoContent.html(paginacaoTemplate(paginacaoData));
                
            }
            
            function _goToPage(event) {
                event.stopImmediatePropagation();

                var indicePagina = $(this).data('pagina');

                events.emit('paginar', indicePagina);
            }
            
            function setData(currentPage, pagesCount) {
                paginacaoData = { 
                    paginas: util.gerarPaginas(currentPage, pagesCount),
                    paginaAtual:  currentPage
                };
                _render();
            }
            
            return {
                setData: setData
            }
            
        })();
        
        var unidades = (function (){
            //cache DOM
            var unidadesTemplate = Handlebars.compile($("#combo-template").html());
            var $content = $("#unidadesContent");
            
            //bind events
            $content.on("change", "select", selecionarUnidade);
            
            _render();
            
            function selecionarUnidade(){
                var unidade = $(this).val();
                
                events.emit('unidadeSelecionada', unidade);
            }
            
            function _render() {
                jQuery.LoadingOverlay("show");

                $.getJSON('@Url.Action("ObterUnidades")')
                    .done(function(data) {
                        var unidades = $.map(data, function(item) {
                                return { valor: item, texto: item }
                            });
    
                        $content.html(unidadesTemplate({
                            titulo: 'Unidades',
                            comboId: 'unidades',
                            itens: unidades
                        }));
                        
                        $content.find('#unidades').select2({
                            placeholder: "Selecione um estado",
                            //dropdownAutoWidth: true
                            width: '30%'
                        });
                        
                    })
                    .fail(util.tratarError)
                    .always(function() {
                        jQuery.LoadingOverlay("hide");
                    });
            }
            
            function unidadeSelecionada(){
                return $content.find('#unidades').val();
             }
             
            return {
                unidadeSelecionada: unidadeSelecionada
            }
            
        })();
        
        var municipios = (function (){
            var unidadeFederativa = '';
            var municipios = [];
            var paginaAtual = 1;
            
            //cache DOM
            var $municipiosContent = $("#municipiosContent");
            var municipiosTemplate = Handlebars.compile($("#table-template").html());
            
            //bind events
            events.on('paginar', paginar);
            events.on('unidadeSelecionada', carregarMunicipios);
                                
            function _render(data){
                if (data != null && !jQuery.isEmptyObject(data)) {
        
                    $municipiosContent.html('');
        
                    var municipios = $.map(data.results,
                        function(item) {
                            return {
                                codigo: item.codigo,
                                nome: item.nome,
                                editavel: item.editavel
                            }
                        });
        
                    var municipiosData = {
                        titulo: 'Municípios',
                        tabelaId: 'municipios',
                        cabecalho_nome: "Nome",
                        itens: municipios,
                        
                    };
        
                    $municipiosContent.html(municipiosTemplate(municipiosData));
        
                    //TODO
                    $municipiosContent.on("click", "table tbody a", function(event) {
                            event.stopImmediatePropagation();
        
                            var elem = $(this);
                            elem.next('.txtedit').show().focus();
                            elem.hide();
        
                        });
        
                    //TODO
                    $municipiosContent.on("keypress", "table tbody input.txtedit", function(event) {
                        event.stopImmediatePropagation();
        
                        // PRESS ENTER
                        if ( event.which == 13 ) {
                            event.preventDefault();
                            editarMunicipio($(this));
                        }
        
                    });
        
                }                        
            }
            
            function editarMunicipio(elem) {
                
                jQuery.LoadingOverlay("show");
                
                var municipioCodigo = elem.attr('data-id');
                var municipioNovoNome = elem.val();
    
                elem.hide();
    
                $.post('@Url.Action("AlterarNomeMunicipio")', { codigo: municipioCodigo, novoNome: municipioNovoNome })
                    .done(function (data) {
                        if (data != null && !jQuery.isEmptyObject(data)) {
                            //TODO
                        }
                        
                        const Toast = Swal.mixin({
                          toast: true,
                          position: 'top',
                          showConfirmButton: false,
                          timer: 3000,
                          timerProgressBar: true
                        })
    
                        Toast.fire({
                            icon: 'success',
                            title: '<h4>Alteração realizada com sucesso!</h4>'
                        });
                        
                        carregarMunicipios();
                                
                    })
                    .fail(util.tratarError)
                    .always(function() { jQuery.LoadingOverlay("hide"); });
            }
            
            function carregarMunicipios() {
                jQuery.LoadingOverlay("show");

                unidadeFederativa = unidades.unidadeSelecionada();
                
                $.getJSON('@Url.Action("ObterMunicipiosPor")', { uf: unidadeFederativa, pagina: paginaAtual })
                    .done(function (data){
                        _render(data);
                        paginacao.setData(data.currentPage, data.pageCount);
                        
                    })
                    .fail(util.tratarError)
                    .always(function() { jQuery.LoadingOverlay("hide"); });
            }
            
            function paginar(indice) {
                paginaAtual = indice;
                
                carregarMunicipios();
            }            
            
        })();
        
        jQuery(function($) {
            'use strict';

            Handlebars.registerHelper('eq', function(a, b) {
                return a === b;
            });

        });

    </script>
}